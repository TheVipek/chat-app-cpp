// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: communication.proto
// Protobuf C++ Version: 5.29.3

#ifndef communication_2eproto_2epb_2eh
#define communication_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_communication_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_communication_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_communication_2eproto;
class AdvancedServerConfig;
struct AdvancedServerConfigDefaultTypeInternal;
extern AdvancedServerConfigDefaultTypeInternal _AdvancedServerConfig_default_instance_;
class ChatMessage;
struct ChatMessageDefaultTypeInternal;
extern ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;
class ClientUser;
struct ClientUserDefaultTypeInternal;
extern ClientUserDefaultTypeInternal _ClientUser_default_instance_;
class CommandRequest;
struct CommandRequestDefaultTypeInternal;
extern CommandRequestDefaultTypeInternal _CommandRequest_default_instance_;
class CommandResponse;
struct CommandResponseDefaultTypeInternal;
extern CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
class Envelope;
struct EnvelopeDefaultTypeInternal;
extern EnvelopeDefaultTypeInternal _Envelope_default_instance_;
class Room;
struct RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class SimpleServerConfig;
struct SimpleServerConfigDefaultTypeInternal;
extern SimpleServerConfigDefaultTypeInternal _SimpleServerConfig_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum CommandType : int {
  INVALID = 0,
  HELP = 1,
  NICKNAME = 2,
  JOIN_ROOM = 3,
  LEAVE_ROOM = 4,
  ROOM_LIST = 5,
  CREATE_ROOM = 6,
  CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CommandType_IsValid(int value);
extern const uint32_t CommandType_internal_data_[];
constexpr CommandType CommandType_MIN = static_cast<CommandType>(0);
constexpr CommandType CommandType_MAX = static_cast<CommandType>(6);
constexpr int CommandType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
CommandType_descriptor();
template <typename T>
const std::string& CommandType_Name(T value) {
  static_assert(std::is_same<T, CommandType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CommandType_Name().");
  return CommandType_Name(static_cast<CommandType>(value));
}
template <>
inline const std::string& CommandType_Name(CommandType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CommandType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool CommandType_Parse(absl::string_view name, CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CommandType>(
      CommandType_descriptor(), name, value);
}
enum MessageType : int {
  CHAT_MESSAGE = 0,
  USER_JOIN_ROOM = 1,
  USER_LEAVE_ROOM = 2,
  COMMAND = 4,
  PING = 5,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MessageType_IsValid(int value);
extern const uint32_t MessageType_internal_data_[];
constexpr MessageType MessageType_MIN = static_cast<MessageType>(0);
constexpr MessageType MessageType_MAX = static_cast<MessageType>(5);
constexpr int MessageType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
MessageType_descriptor();
template <typename T>
const std::string& MessageType_Name(T value) {
  static_assert(std::is_same<T, MessageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageType_Name().");
  return MessageType_Name(static_cast<MessageType>(value));
}
template <>
inline const std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MessageType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool MessageType_Parse(absl::string_view name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
      MessageType_descriptor(), name, value);
}
enum MessageSendType : int {
  LOCAL = 0,
  WITHIN_ROOM = 1,
  WITHIN_ROOM_EXCEPT_THIS = 2,
  GLOBAL = 3,
  MessageSendType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MessageSendType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MessageSendType_IsValid(int value);
extern const uint32_t MessageSendType_internal_data_[];
constexpr MessageSendType MessageSendType_MIN = static_cast<MessageSendType>(0);
constexpr MessageSendType MessageSendType_MAX = static_cast<MessageSendType>(3);
constexpr int MessageSendType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
MessageSendType_descriptor();
template <typename T>
const std::string& MessageSendType_Name(T value) {
  static_assert(std::is_same<T, MessageSendType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageSendType_Name().");
  return MessageSendType_Name(static_cast<MessageSendType>(value));
}
template <>
inline const std::string& MessageSendType_Name(MessageSendType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MessageSendType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool MessageSendType_Parse(absl::string_view name, MessageSendType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageSendType>(
      MessageSendType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SimpleServerConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:SimpleServerConfig) */ {
 public:
  inline SimpleServerConfig() : SimpleServerConfig(nullptr) {}
  ~SimpleServerConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SimpleServerConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SimpleServerConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleServerConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimpleServerConfig(const SimpleServerConfig& from) : SimpleServerConfig(nullptr, from) {}
  inline SimpleServerConfig(SimpleServerConfig&& from) noexcept
      : SimpleServerConfig(nullptr, std::move(from)) {}
  inline SimpleServerConfig& operator=(const SimpleServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleServerConfig& operator=(SimpleServerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleServerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleServerConfig* internal_default_instance() {
    return reinterpret_cast<const SimpleServerConfig*>(
        &_SimpleServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(SimpleServerConfig& a, SimpleServerConfig& b) { a.Swap(&b); }
  inline void Swap(SimpleServerConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleServerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleServerConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SimpleServerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleServerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimpleServerConfig& from) { SimpleServerConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SimpleServerConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "SimpleServerConfig"; }

 protected:
  explicit SimpleServerConfig(::google::protobuf::Arena* arena);
  SimpleServerConfig(::google::protobuf::Arena* arena, const SimpleServerConfig& from);
  SimpleServerConfig(::google::protobuf::Arena* arena, SimpleServerConfig&& from) noexcept
      : SimpleServerConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAddressFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string address = 1;
  void clear_address() ;
  const std::string& address() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address(Arg_&& arg, Args_... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* value);

  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(
      const std::string& value);
  std::string* _internal_mutable_address();

  public:
  // int32 port = 2;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:SimpleServerConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      34, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimpleServerConfig& from_msg);
    ::google::protobuf::internal::ArenaStringPtr address_;
    ::int32_t port_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Room final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Room) */ {
 public:
  inline Room() : Room(nullptr) {}
  ~Room() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Room* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Room));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Room(
      ::google::protobuf::internal::ConstantInitialized);

  inline Room(const Room& from) : Room(nullptr, from) {}
  inline Room(Room&& from) noexcept
      : Room(nullptr, std::move(from)) {}
  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline Room& operator=(Room&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Room& default_instance() {
    return *internal_default_instance();
  }
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
        &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Room& a, Room& b) { a.Swap(&b); }
  inline void Swap(Room* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Room* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Room* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Room>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Room& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Room& from) { Room::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Room* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Room"; }

 protected:
  explicit Room(::google::protobuf::Arena* arena);
  Room(::google::protobuf::Arena* arena, const Room& from);
  Room(::google::protobuf::Arena* arena, Room&& from) noexcept
      : Room(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 2,
    kPasswordFieldNumber = 4,
    kIdFieldNumber = 1,
    kHasPasswordFieldNumber = 3,
    kIsPublicFieldNumber = 6,
    kMaxConnectionsFieldNumber = 5,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string password = 4;
  void clear_password() ;
  const std::string& password() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* value);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // bool hasPassword = 3;
  void clear_haspassword() ;
  bool haspassword() const;
  void set_haspassword(bool value);

  private:
  bool _internal_haspassword() const;
  void _internal_set_haspassword(bool value);

  public:
  // bool isPublic = 6;
  void clear_ispublic() ;
  bool ispublic() const;
  void set_ispublic(bool value);

  private:
  bool _internal_ispublic() const;
  void _internal_set_ispublic(bool value);

  public:
  // int32 maxConnections = 5;
  void clear_maxconnections() ;
  ::int32_t maxconnections() const;
  void set_maxconnections(::int32_t value);

  private:
  ::int32_t _internal_maxconnections() const;
  void _internal_set_maxconnections(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Room)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      25, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Room& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr password_;
    ::int32_t id_;
    bool haspassword_;
    bool ispublic_;
    ::int32_t maxconnections_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class Envelope final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Envelope) */ {
 public:
  inline Envelope() : Envelope(nullptr) {}
  ~Envelope() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Envelope* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Envelope));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Envelope(
      ::google::protobuf::internal::ConstantInitialized);

  inline Envelope(const Envelope& from) : Envelope(nullptr, from) {}
  inline Envelope(Envelope&& from) noexcept
      : Envelope(nullptr, std::move(from)) {}
  inline Envelope& operator=(const Envelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline Envelope& operator=(Envelope&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Envelope& default_instance() {
    return *internal_default_instance();
  }
  static inline const Envelope* internal_default_instance() {
    return reinterpret_cast<const Envelope*>(
        &_Envelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Envelope& a, Envelope& b) { a.Swap(&b); }
  inline void Swap(Envelope* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Envelope* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Envelope* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Envelope>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Envelope& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Envelope& from) { Envelope::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Envelope* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Envelope"; }

 protected:
  explicit Envelope(::google::protobuf::Arena* arena);
  Envelope(::google::protobuf::Arena* arena, const Envelope& from);
  Envelope(::google::protobuf::Arena* arena, Envelope&& from) noexcept
      : Envelope(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPayloadFieldNumber = 3,
    kSendTypeFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // bytes payload = 3;
  void clear_payload() ;
  const std::string& payload() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* value);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // .MessageSendType sendType = 1;
  void clear_sendtype() ;
  ::MessageSendType sendtype() const;
  void set_sendtype(::MessageSendType value);

  private:
  ::MessageSendType _internal_sendtype() const;
  void _internal_set_sendtype(::MessageSendType value);

  public:
  // .MessageType type = 2;
  void clear_type() ;
  ::MessageType type() const;
  void set_type(::MessageType value);

  private:
  ::MessageType _internal_type() const;
  void _internal_set_type(::MessageType value);

  public:
  // @@protoc_insertion_point(class_scope:Envelope)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Envelope& from_msg);
    ::google::protobuf::internal::ArenaStringPtr payload_;
    int sendtype_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class CommandResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CommandResponse) */ {
 public:
  inline CommandResponse() : CommandResponse(nullptr) {}
  ~CommandResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CommandResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CommandResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommandResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CommandResponse(const CommandResponse& from) : CommandResponse(nullptr, from) {}
  inline CommandResponse(CommandResponse&& from) noexcept
      : CommandResponse(nullptr, std::move(from)) {}
  inline CommandResponse& operator=(const CommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResponse& operator=(CommandResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandResponse* internal_default_instance() {
    return reinterpret_cast<const CommandResponse*>(
        &_CommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(CommandResponse& a, CommandResponse& b) { a.Swap(&b); }
  inline void Swap(CommandResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CommandResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommandResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommandResponse& from) { CommandResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CommandResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CommandResponse"; }

 protected:
  explicit CommandResponse(::google::protobuf::Arena* arena);
  CommandResponse(::google::protobuf::Arena* arena, const CommandResponse& from);
  CommandResponse(::google::protobuf::Arena* arena, CommandResponse&& from) noexcept
      : CommandResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kResponseFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string response = 2;
  void clear_response() ;
  const std::string& response() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_response(Arg_&& arg, Args_... args);
  std::string* mutable_response();
  PROTOBUF_NODISCARD std::string* release_response();
  void set_allocated_response(std::string* value);

  private:
  const std::string& _internal_response() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response(
      const std::string& value);
  std::string* _internal_mutable_response();

  public:
  // .CommandType type = 1;
  void clear_type() ;
  ::CommandType type() const;
  void set_type(::CommandType value);

  private:
  ::CommandType _internal_type() const;
  void _internal_set_type(::CommandType value);

  public:
  // @@protoc_insertion_point(class_scope:CommandResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      32, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CommandResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr response_;
    int type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class CommandRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CommandRequest) */ {
 public:
  inline CommandRequest() : CommandRequest(nullptr) {}
  ~CommandRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CommandRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CommandRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CommandRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CommandRequest(const CommandRequest& from) : CommandRequest(nullptr, from) {}
  inline CommandRequest(CommandRequest&& from) noexcept
      : CommandRequest(nullptr, std::move(from)) {}
  inline CommandRequest& operator=(const CommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRequest& operator=(CommandRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandRequest* internal_default_instance() {
    return reinterpret_cast<const CommandRequest*>(
        &_CommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(CommandRequest& a, CommandRequest& b) { a.Swap(&b); }
  inline void Swap(CommandRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommandRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CommandRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CommandRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CommandRequest& from) { CommandRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CommandRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CommandRequest"; }

 protected:
  explicit CommandRequest(::google::protobuf::Arena* arena);
  CommandRequest(::google::protobuf::Arena* arena, const CommandRequest& from);
  CommandRequest(::google::protobuf::Arena* arena, CommandRequest&& from) noexcept
      : CommandRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRequestParametersFieldNumber = 2,
    kRequestFieldNumber = 1,
  };
  // repeated string requestParameters = 2;
  int requestparameters_size() const;
  private:
  int _internal_requestparameters_size() const;

  public:
  void clear_requestparameters() ;
  const std::string& requestparameters(int index) const;
  std::string* mutable_requestparameters(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_requestparameters(int index, Arg_&& value, Args_... args);
  std::string* add_requestparameters();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_requestparameters(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& requestparameters() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_requestparameters();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_requestparameters() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_requestparameters();

  public:
  // string request = 1;
  void clear_request() ;
  const std::string& request() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request(Arg_&& arg, Args_... args);
  std::string* mutable_request();
  PROTOBUF_NODISCARD std::string* release_request();
  void set_allocated_request(std::string* value);

  private:
  const std::string& _internal_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request(
      const std::string& value);
  std::string* _internal_mutable_request();

  public:
  // @@protoc_insertion_point(class_scope:CommandRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CommandRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> requestparameters_;
    ::google::protobuf::internal::ArenaStringPtr request_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class ClientUser final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ClientUser) */ {
 public:
  inline ClientUser() : ClientUser(nullptr) {}
  ~ClientUser() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ClientUser* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ClientUser));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ClientUser(
      ::google::protobuf::internal::ConstantInitialized);

  inline ClientUser(const ClientUser& from) : ClientUser(nullptr, from) {}
  inline ClientUser(ClientUser&& from) noexcept
      : ClientUser(nullptr, std::move(from)) {}
  inline ClientUser& operator=(const ClientUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientUser& operator=(ClientUser&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientUser* internal_default_instance() {
    return reinterpret_cast<const ClientUser*>(
        &_ClientUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ClientUser& a, ClientUser& b) { a.Swap(&b); }
  inline void Swap(ClientUser* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientUser* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientUser* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ClientUser>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientUser& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ClientUser& from) { ClientUser::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ClientUser* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ClientUser"; }

 protected:
  explicit ClientUser(::google::protobuf::Arena* arena);
  ClientUser(::google::protobuf::Arena* arena, const ClientUser& from);
  ClientUser(::google::protobuf::Arena* arena, ClientUser&& from) noexcept
      : ClientUser(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kConnectedRoomIDFieldNumber = 3,
  };
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 connectedRoomID = 3;
  void clear_connectedroomid() ;
  ::int32_t connectedroomid() const;
  void set_connectedroomid(::int32_t value);

  private:
  ::int32_t _internal_connectedroomid() const;
  void _internal_set_connectedroomid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ClientUser)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      23, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ClientUser& from_msg);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t id_;
    ::int32_t connectedroomid_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class ChatMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:ChatMessage) */ {
 public:
  inline ChatMessage() : ChatMessage(nullptr) {}
  ~ChatMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ChatMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ChatMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ChatMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline ChatMessage(const ChatMessage& from) : ChatMessage(nullptr, from) {}
  inline ChatMessage(ChatMessage&& from) noexcept
      : ChatMessage(nullptr, std::move(from)) {}
  inline ChatMessage& operator=(const ChatMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChatMessage& operator=(ChatMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChatMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChatMessage* internal_default_instance() {
    return reinterpret_cast<const ChatMessage*>(
        &_ChatMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(ChatMessage& a, ChatMessage& b) { a.Swap(&b); }
  inline void Swap(ChatMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChatMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChatMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ChatMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ChatMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ChatMessage& from) { ChatMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ChatMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "ChatMessage"; }

 protected:
  explicit ChatMessage(::google::protobuf::Arena* arena);
  ChatMessage(::google::protobuf::Arena* arena, const ChatMessage& from);
  ChatMessage(::google::protobuf::Arena* arena, ChatMessage&& from) noexcept
      : ChatMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSenderFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string sender = 1;
  void clear_sender() ;
  const std::string& sender() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sender(Arg_&& arg, Args_... args);
  std::string* mutable_sender();
  PROTOBUF_NODISCARD std::string* release_sender();
  void set_allocated_sender(std::string* value);

  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(
      const std::string& value);
  std::string* _internal_mutable_sender();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:ChatMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      33, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ChatMessage& from_msg);
    ::google::protobuf::internal::ArenaStringPtr sender_;
    ::google::protobuf::internal::ArenaStringPtr message_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};
// -------------------------------------------------------------------

class AdvancedServerConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:AdvancedServerConfig) */ {
 public:
  inline AdvancedServerConfig() : AdvancedServerConfig(nullptr) {}
  ~AdvancedServerConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AdvancedServerConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AdvancedServerConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AdvancedServerConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline AdvancedServerConfig(const AdvancedServerConfig& from) : AdvancedServerConfig(nullptr, from) {}
  inline AdvancedServerConfig(AdvancedServerConfig&& from) noexcept
      : AdvancedServerConfig(nullptr, std::move(from)) {}
  inline AdvancedServerConfig& operator=(const AdvancedServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvancedServerConfig& operator=(AdvancedServerConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdvancedServerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdvancedServerConfig* internal_default_instance() {
    return reinterpret_cast<const AdvancedServerConfig*>(
        &_AdvancedServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AdvancedServerConfig& a, AdvancedServerConfig& b) { a.Swap(&b); }
  inline void Swap(AdvancedServerConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdvancedServerConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdvancedServerConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AdvancedServerConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AdvancedServerConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AdvancedServerConfig& from) { AdvancedServerConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AdvancedServerConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "AdvancedServerConfig"; }

 protected:
  explicit AdvancedServerConfig(::google::protobuf::Arena* arena);
  AdvancedServerConfig(::google::protobuf::Arena* arena, const AdvancedServerConfig& from);
  AdvancedServerConfig(::google::protobuf::Arena* arena, AdvancedServerConfig&& from) noexcept
      : AdvancedServerConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kRoomsFieldNumber = 2,
    kServerFieldNumber = 1,
  };
  // repeated .Room rooms = 2;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;

  public:
  void clear_rooms() ;
  ::Room* mutable_rooms(int index);
  ::google::protobuf::RepeatedPtrField<::Room>* mutable_rooms();

  private:
  const ::google::protobuf::RepeatedPtrField<::Room>& _internal_rooms() const;
  ::google::protobuf::RepeatedPtrField<::Room>* _internal_mutable_rooms();
  public:
  const ::Room& rooms(int index) const;
  ::Room* add_rooms();
  const ::google::protobuf::RepeatedPtrField<::Room>& rooms() const;
  // .SimpleServerConfig server = 1;
  bool has_server() const;
  void clear_server() ;
  const ::SimpleServerConfig& server() const;
  PROTOBUF_NODISCARD ::SimpleServerConfig* release_server();
  ::SimpleServerConfig* mutable_server();
  void set_allocated_server(::SimpleServerConfig* value);
  void unsafe_arena_set_allocated_server(::SimpleServerConfig* value);
  ::SimpleServerConfig* unsafe_arena_release_server();

  private:
  const ::SimpleServerConfig& _internal_server() const;
  ::SimpleServerConfig* _internal_mutable_server();

  public:
  // @@protoc_insertion_point(class_scope:AdvancedServerConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AdvancedServerConfig& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::Room > rooms_;
    ::SimpleServerConfig* server_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_communication_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AdvancedServerConfig

// .SimpleServerConfig server = 1;
inline bool AdvancedServerConfig::has_server() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.server_ != nullptr);
  return value;
}
inline void AdvancedServerConfig::clear_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.server_ != nullptr) _impl_.server_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::SimpleServerConfig& AdvancedServerConfig::_internal_server() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::SimpleServerConfig* p = _impl_.server_;
  return p != nullptr ? *p : reinterpret_cast<const ::SimpleServerConfig&>(::_SimpleServerConfig_default_instance_);
}
inline const ::SimpleServerConfig& AdvancedServerConfig::server() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AdvancedServerConfig.server)
  return _internal_server();
}
inline void AdvancedServerConfig::unsafe_arena_set_allocated_server(::SimpleServerConfig* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.server_);
  }
  _impl_.server_ = reinterpret_cast<::SimpleServerConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:AdvancedServerConfig.server)
}
inline ::SimpleServerConfig* AdvancedServerConfig::release_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SimpleServerConfig* released = _impl_.server_;
  _impl_.server_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::SimpleServerConfig* AdvancedServerConfig::unsafe_arena_release_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:AdvancedServerConfig.server)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SimpleServerConfig* temp = _impl_.server_;
  _impl_.server_ = nullptr;
  return temp;
}
inline ::SimpleServerConfig* AdvancedServerConfig::_internal_mutable_server() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.server_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::SimpleServerConfig>(GetArena());
    _impl_.server_ = reinterpret_cast<::SimpleServerConfig*>(p);
  }
  return _impl_.server_;
}
inline ::SimpleServerConfig* AdvancedServerConfig::mutable_server() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::SimpleServerConfig* _msg = _internal_mutable_server();
  // @@protoc_insertion_point(field_mutable:AdvancedServerConfig.server)
  return _msg;
}
inline void AdvancedServerConfig::set_allocated_server(::SimpleServerConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.server_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.server_ = reinterpret_cast<::SimpleServerConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:AdvancedServerConfig.server)
}

// repeated .Room rooms = 2;
inline int AdvancedServerConfig::_internal_rooms_size() const {
  return _internal_rooms().size();
}
inline int AdvancedServerConfig::rooms_size() const {
  return _internal_rooms_size();
}
inline void AdvancedServerConfig::clear_rooms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rooms_.Clear();
}
inline ::Room* AdvancedServerConfig::mutable_rooms(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:AdvancedServerConfig.rooms)
  return _internal_mutable_rooms()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Room>* AdvancedServerConfig::mutable_rooms()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:AdvancedServerConfig.rooms)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_rooms();
}
inline const ::Room& AdvancedServerConfig::rooms(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:AdvancedServerConfig.rooms)
  return _internal_rooms().Get(index);
}
inline ::Room* AdvancedServerConfig::add_rooms() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::Room* _add = _internal_mutable_rooms()->Add();
  // @@protoc_insertion_point(field_add:AdvancedServerConfig.rooms)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Room>& AdvancedServerConfig::rooms() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:AdvancedServerConfig.rooms)
  return _internal_rooms();
}
inline const ::google::protobuf::RepeatedPtrField<::Room>&
AdvancedServerConfig::_internal_rooms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rooms_;
}
inline ::google::protobuf::RepeatedPtrField<::Room>*
AdvancedServerConfig::_internal_mutable_rooms() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.rooms_;
}

// -------------------------------------------------------------------

// Room

// int32 id = 1;
inline void Room::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t Room::id() const {
  // @@protoc_insertion_point(field_get:Room.id)
  return _internal_id();
}
inline void Room::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Room.id)
}
inline ::int32_t Room::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Room::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string name = 2;
inline void Room::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Room::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Room.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Room::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Room.name)
}
inline std::string* Room::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Room.name)
  return _s;
}
inline const std::string& Room::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Room::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Room::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Room::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Room.name)
  return _impl_.name_.Release();
}
inline void Room::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Room.name)
}

// bool hasPassword = 3;
inline void Room::clear_haspassword() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.haspassword_ = false;
}
inline bool Room::haspassword() const {
  // @@protoc_insertion_point(field_get:Room.hasPassword)
  return _internal_haspassword();
}
inline void Room::set_haspassword(bool value) {
  _internal_set_haspassword(value);
  // @@protoc_insertion_point(field_set:Room.hasPassword)
}
inline bool Room::_internal_haspassword() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.haspassword_;
}
inline void Room::_internal_set_haspassword(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.haspassword_ = value;
}

// string password = 4;
inline void Room::clear_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.ClearToEmpty();
}
inline const std::string& Room::password() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Room.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Room::set_password(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Room.password)
}
inline std::string* Room::mutable_password() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Room.password)
  return _s;
}
inline const std::string& Room::_internal_password() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.password_.Get();
}
inline void Room::_internal_set_password(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.Set(value, GetArena());
}
inline std::string* Room::_internal_mutable_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.password_.Mutable( GetArena());
}
inline std::string* Room::release_password() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Room.password)
  return _impl_.password_.Release();
}
inline void Room::set_allocated_password(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.password_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Room.password)
}

// int32 maxConnections = 5;
inline void Room::clear_maxconnections() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxconnections_ = 0;
}
inline ::int32_t Room::maxconnections() const {
  // @@protoc_insertion_point(field_get:Room.maxConnections)
  return _internal_maxconnections();
}
inline void Room::set_maxconnections(::int32_t value) {
  _internal_set_maxconnections(value);
  // @@protoc_insertion_point(field_set:Room.maxConnections)
}
inline ::int32_t Room::_internal_maxconnections() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.maxconnections_;
}
inline void Room::_internal_set_maxconnections(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.maxconnections_ = value;
}

// bool isPublic = 6;
inline void Room::clear_ispublic() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ispublic_ = false;
}
inline bool Room::ispublic() const {
  // @@protoc_insertion_point(field_get:Room.isPublic)
  return _internal_ispublic();
}
inline void Room::set_ispublic(bool value) {
  _internal_set_ispublic(value);
  // @@protoc_insertion_point(field_set:Room.isPublic)
}
inline bool Room::_internal_ispublic() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ispublic_;
}
inline void Room::_internal_set_ispublic(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ispublic_ = value;
}

// -------------------------------------------------------------------

// SimpleServerConfig

// string address = 1;
inline void SimpleServerConfig::clear_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.ClearToEmpty();
}
inline const std::string& SimpleServerConfig::address() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:SimpleServerConfig.address)
  return _internal_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimpleServerConfig::set_address(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:SimpleServerConfig.address)
}
inline std::string* SimpleServerConfig::mutable_address() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:SimpleServerConfig.address)
  return _s;
}
inline const std::string& SimpleServerConfig::_internal_address() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_.Get();
}
inline void SimpleServerConfig::_internal_set_address(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.Set(value, GetArena());
}
inline std::string* SimpleServerConfig::_internal_mutable_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.address_.Mutable( GetArena());
}
inline std::string* SimpleServerConfig::release_address() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:SimpleServerConfig.address)
  return _impl_.address_.Release();
}
inline void SimpleServerConfig::set_allocated_address(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:SimpleServerConfig.address)
}

// int32 port = 2;
inline void SimpleServerConfig::clear_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = 0;
}
inline ::int32_t SimpleServerConfig::port() const {
  // @@protoc_insertion_point(field_get:SimpleServerConfig.port)
  return _internal_port();
}
inline void SimpleServerConfig::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:SimpleServerConfig.port)
}
inline ::int32_t SimpleServerConfig::_internal_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.port_;
}
inline void SimpleServerConfig::_internal_set_port(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.port_ = value;
}

// -------------------------------------------------------------------

// ClientUser

// int32 id = 1;
inline void ClientUser::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t ClientUser::id() const {
  // @@protoc_insertion_point(field_get:ClientUser.id)
  return _internal_id();
}
inline void ClientUser::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ClientUser.id)
}
inline ::int32_t ClientUser::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void ClientUser::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string name = 2;
inline void ClientUser::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ClientUser::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ClientUser.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientUser::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ClientUser.name)
}
inline std::string* ClientUser::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ClientUser.name)
  return _s;
}
inline const std::string& ClientUser::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void ClientUser::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ClientUser::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ClientUser::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ClientUser.name)
  return _impl_.name_.Release();
}
inline void ClientUser::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ClientUser.name)
}

// int32 connectedRoomID = 3;
inline void ClientUser::clear_connectedroomid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connectedroomid_ = 0;
}
inline ::int32_t ClientUser::connectedroomid() const {
  // @@protoc_insertion_point(field_get:ClientUser.connectedRoomID)
  return _internal_connectedroomid();
}
inline void ClientUser::set_connectedroomid(::int32_t value) {
  _internal_set_connectedroomid(value);
  // @@protoc_insertion_point(field_set:ClientUser.connectedRoomID)
}
inline ::int32_t ClientUser::_internal_connectedroomid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connectedroomid_;
}
inline void ClientUser::_internal_set_connectedroomid(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connectedroomid_ = value;
}

// -------------------------------------------------------------------

// ChatMessage

// string sender = 1;
inline void ChatMessage::clear_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.ClearToEmpty();
}
inline const std::string& ChatMessage::sender() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ChatMessage.sender)
  return _internal_sender();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessage::set_sender(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ChatMessage.sender)
}
inline std::string* ChatMessage::mutable_sender() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sender();
  // @@protoc_insertion_point(field_mutable:ChatMessage.sender)
  return _s;
}
inline const std::string& ChatMessage::_internal_sender() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sender_.Get();
}
inline void ChatMessage::_internal_set_sender(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.Set(value, GetArena());
}
inline std::string* ChatMessage::_internal_mutable_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sender_.Mutable( GetArena());
}
inline std::string* ChatMessage::release_sender() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ChatMessage.sender)
  return _impl_.sender_.Release();
}
inline void ChatMessage::set_allocated_sender(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sender_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sender_.IsDefault()) {
    _impl_.sender_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.sender)
}

// string message = 2;
inline void ChatMessage::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& ChatMessage::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ChatMessage.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChatMessage::set_message(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ChatMessage.message)
}
inline std::string* ChatMessage::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:ChatMessage.message)
  return _s;
}
inline const std::string& ChatMessage::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.message_.Get();
}
inline void ChatMessage::_internal_set_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.Set(value, GetArena());
}
inline std::string* ChatMessage::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* ChatMessage::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:ChatMessage.message)
  return _impl_.message_.Release();
}
inline void ChatMessage::set_allocated_message(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.message)
}

// -------------------------------------------------------------------

// CommandRequest

// string request = 1;
inline void CommandRequest::clear_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_.ClearToEmpty();
}
inline const std::string& CommandRequest::request() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommandRequest.request)
  return _internal_request();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommandRequest::set_request(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CommandRequest.request)
}
inline std::string* CommandRequest::mutable_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:CommandRequest.request)
  return _s;
}
inline const std::string& CommandRequest::_internal_request() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.request_.Get();
}
inline void CommandRequest::_internal_set_request(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_.Set(value, GetArena());
}
inline std::string* CommandRequest::_internal_mutable_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.request_.Mutable( GetArena());
}
inline std::string* CommandRequest::release_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CommandRequest.request)
  return _impl_.request_.Release();
}
inline void CommandRequest::set_allocated_request(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.request_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.request_.IsDefault()) {
    _impl_.request_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CommandRequest.request)
}

// repeated string requestParameters = 2;
inline int CommandRequest::_internal_requestparameters_size() const {
  return _internal_requestparameters().size();
}
inline int CommandRequest::requestparameters_size() const {
  return _internal_requestparameters_size();
}
inline void CommandRequest::clear_requestparameters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.requestparameters_.Clear();
}
inline std::string* CommandRequest::add_requestparameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_requestparameters()->Add();
  // @@protoc_insertion_point(field_add_mutable:CommandRequest.requestParameters)
  return _s;
}
inline const std::string& CommandRequest::requestparameters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommandRequest.requestParameters)
  return _internal_requestparameters().Get(index);
}
inline std::string* CommandRequest::mutable_requestparameters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:CommandRequest.requestParameters)
  return _internal_mutable_requestparameters()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CommandRequest::set_requestparameters(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_requestparameters()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:CommandRequest.requestParameters)
}
template <typename Arg_, typename... Args_>
inline void CommandRequest::add_requestparameters(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_requestparameters(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:CommandRequest.requestParameters)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CommandRequest::requestparameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CommandRequest.requestParameters)
  return _internal_requestparameters();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CommandRequest::mutable_requestparameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CommandRequest.requestParameters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_requestparameters();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CommandRequest::_internal_requestparameters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.requestparameters_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
CommandRequest::_internal_mutable_requestparameters() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.requestparameters_;
}

// -------------------------------------------------------------------

// CommandResponse

// .CommandType type = 1;
inline void CommandResponse::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::CommandType CommandResponse::type() const {
  // @@protoc_insertion_point(field_get:CommandResponse.type)
  return _internal_type();
}
inline void CommandResponse::set_type(::CommandType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:CommandResponse.type)
}
inline ::CommandType CommandResponse::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::CommandType>(_impl_.type_);
}
inline void CommandResponse::_internal_set_type(::CommandType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string response = 2;
inline void CommandResponse::clear_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_.ClearToEmpty();
}
inline const std::string& CommandResponse::response() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CommandResponse.response)
  return _internal_response();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CommandResponse::set_response(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CommandResponse.response)
}
inline std::string* CommandResponse::mutable_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:CommandResponse.response)
  return _s;
}
inline const std::string& CommandResponse::_internal_response() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.response_.Get();
}
inline void CommandResponse::_internal_set_response(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_.Set(value, GetArena());
}
inline std::string* CommandResponse::_internal_mutable_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.response_.Mutable( GetArena());
}
inline std::string* CommandResponse::release_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CommandResponse.response)
  return _impl_.response_.Release();
}
inline void CommandResponse::set_allocated_response(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.response_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.response_.IsDefault()) {
    _impl_.response_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CommandResponse.response)
}

// -------------------------------------------------------------------

// Envelope

// .MessageSendType sendType = 1;
inline void Envelope::clear_sendtype() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sendtype_ = 0;
}
inline ::MessageSendType Envelope::sendtype() const {
  // @@protoc_insertion_point(field_get:Envelope.sendType)
  return _internal_sendtype();
}
inline void Envelope::set_sendtype(::MessageSendType value) {
  _internal_set_sendtype(value);
  // @@protoc_insertion_point(field_set:Envelope.sendType)
}
inline ::MessageSendType Envelope::_internal_sendtype() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::MessageSendType>(_impl_.sendtype_);
}
inline void Envelope::_internal_set_sendtype(::MessageSendType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sendtype_ = value;
}

// .MessageType type = 2;
inline void Envelope::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::MessageType Envelope::type() const {
  // @@protoc_insertion_point(field_get:Envelope.type)
  return _internal_type();
}
inline void Envelope::set_type(::MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Envelope.type)
}
inline ::MessageType Envelope::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::MessageType>(_impl_.type_);
}
inline void Envelope::_internal_set_type(::MessageType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// bytes payload = 3;
inline void Envelope::clear_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& Envelope::payload() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Envelope.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Envelope::set_payload(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Envelope.payload)
}
inline std::string* Envelope::mutable_payload() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:Envelope.payload)
  return _s;
}
inline const std::string& Envelope::_internal_payload() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.payload_.Get();
}
inline void Envelope::_internal_set_payload(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.Set(value, GetArena());
}
inline std::string* Envelope::_internal_mutable_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.payload_.Mutable( GetArena());
}
inline std::string* Envelope::release_payload() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Envelope.payload)
  return _impl_.payload_.Release();
}
inline void Envelope::set_allocated_payload(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.payload_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Envelope.payload)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::CommandType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::CommandType>() {
  return ::CommandType_descriptor();
}
template <>
struct is_proto_enum<::MessageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::MessageType>() {
  return ::MessageType_descriptor();
}
template <>
struct is_proto_enum<::MessageSendType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::MessageSendType>() {
  return ::MessageSendType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // communication_2eproto_2epb_2eh
